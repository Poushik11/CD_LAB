# -*- coding: utf-8 -*-
"""A_51_Practical_No_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e6ADRo8ELbR4rYGpMux39TDf3FKS7uVH

### Name:Poushik Yelne
### Roll No.51
### Section A3
### Practical No.6:
"""

#A-51
def parse_three_address_code(input_code):
    three_address_code = [tuple(line.split(' ')) for line in input_code.split('\n')]
    return three_address_code

def optimize_three_address_code(three_address_code):
    optimized_code = three_address_code.copy()
    optimized = True

    while optimized:
        optimized = False

        for i in range(len(optimized_code)):
            if optimized_code[i][1] == '=':
                # Copy Propagation
                for j in range(i + 1, len(optimized_code)):
                    if optimized_code[j][0] == optimized_code[i][2]:
                        optimized_code[j] = (optimized_code[i][0], optimized_code[j][1], optimized_code[j][2])

            # Constant Propagation
            try:
                optimized_code[i] = (optimized_code[i][0], optimized_code[i][1], str(eval(optimized_code[i][2])))
            except:
                pass

        for i in range(len(optimized_code) - 2):
            # Constant Folding
            if optimized_code[i][1] in ['+', '-', '*', '/'] and optimized_code[i + 1][1] == '=':
                try:
                    optimized_code[i + 1] = (optimized_code[i + 1][0], '=', str(eval(optimized_code[i][2] +
                                                                                            optimized_code[i][1] +
                                                                                            optimized_code[i + 2][2])))
                    optimized_code.pop(i)
                    optimized_code.pop(i)
                    optimized = True
                    break
                except:
                    pass

        for i in range(len(optimized_code) - 2):
            # Common Subexpression Elimination
            if optimized_code[i][1] == '+' and optimized_code[i + 1][1] == '=' and optimized_code[i + 2][1] == '+':
                if optimized_code[i][0] == optimized_code[i + 2][0]:
                    optimized_code[i + 1] = (optimized_code[i + 1][0], '+', str(int(optimized_code[i + 1][2]) * 2))
                    optimized_code.pop(i + 2)
                    optimized = True
                    break

        # Dead Code Elimination
        optimized_code = [instruction for instruction in optimized_code if instruction[0] not in [ins[2] for ins in optimized_code if ins[1] == '=']]

    return optimized_code

# Input three-address code
input_code = '''t1 = a
b = t1
x = 12.4
y = x / 2
x = 2 * k
y = k + 5
a = b * c
d = a + 4
c = b * c'''

three_address_code = parse_three_address_code(input_code)
optimized_code = optimize_three_address_code(three_address_code)
print("Output:")
for instruction in optimized_code:
    print(' '.join(instruction))